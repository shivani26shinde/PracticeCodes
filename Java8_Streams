public void practice() {

	// Print numbers 1-10
	IntStream
	.range(1,10)
	.forEach(x -> System.out.print(x));
		
	// OR 
	
	IntStream
	.range(1,10)
	.forEach(System.out::print);
	
	// Skip numbers upto given number inclusive
	IntStream
	.range(1,10)
	.skip(5)
	.forEach(x -> System.out.print(x));
	
	// Sum of numbers
	int sum = IntStream
		.range(1,10)
		.sum();
	System.out.println(sum);
	
	// Find 1st element in sorted list
	Stream.of("Washington","Area","Boston","Arizona","Newyork","Chicago")
	.sorted()
	.findFirst()
	.ifPresent(System.out::print);
	
	// Apply filter
	Stream.of("Washington","Area","Boston","Arizona","Newyork","Chicago")
	.filter(x -> x.startsWith("A"))
	.sorted(Collections.reverseOrder())
	.findFirst()
	.ifPresent(System.out::print);
	
	// Squares of even numbers 
	IntStream
	.range(1,10)
	.filter(x -> x%2==0)
	.map(x -> x*x)
	.forEach(System.out::println);
	
	// Average of numbers in array
	Arrays.stream(new int[]{1,2,3,4,5})
	.map(x -> x*x)
	.average()
	.ifPresent(System.out::println);
	
	// Stream list
	List<String> lst = Arrays.asList("washington","area","Boston","Arizona","Newyork","chicago");
	lst
	.stream()
	.filter(x -> x.startsWith("a") || x.startsWith("A"))
	.map(String::toLowerCase)
	.forEach(System.out::println);
	
	// Count
	List<String> lst = Arrays.asList("1,a,b,c","2,a,b,c","3,a,b,c","4,a,b","5,a,b,c","6,a,b,c");
	int count = (int)lst
		.stream()
		.map(x -> x.split(","))
		.filter(x -> x.length==4)
		.count();
	System.out.println(count);
	
	// Sum using reduce
	double sum = Stream.of(1.2,3.2,4.7,2.9)
		.reduce(0.0, (a,b) -> a+b);
	System.out.println(sum);
	
	// Summary of statistics
	IntSummaryStatistics stats = IntStream.of(7,3,2,5,1,8,9)
		.summaryStatistics();
	System.out.println(stats);
	
	// Average
	list
	.stream()
	.mapToInt(x->x)
	.average()
	.getAsDouble();
	
	// Uppercase
	list
	.stream()
	.map(String::toUpperCase)
	.collect(Collectors.toList());
}

// Print average of all students
class Average {
	public void printAvg() {
		List<String> lst = Arrays.asList("A:54","B:43","A:34","C:56","B:66","D:77","A:22");
		Map<String,Node> map = new HashMap<>();
		
		// Create the map
		map = lst
		.stream()
		.map(x -> x.split(":"))
		.collect(Collectors.toMap(
			x -> x[0],
			x -> new Node(Integer.parseInt(x[1]),1),
			(x,y) -> new Node(x.sum+y.sum, x.count+y.count)));
		
		// Print the average
		map
		.entrySet()
		.stream()
		.map(Map.Entry::getValue)
		.map(x -> x.sum/x.count)
		.forEach(System.out::println);
		
		// Print the average
		map.forEach((k,v)->{
			int avg = v.sum/v.count;
			System.out.println("Average of "+k+" is "+avg);
		});
	}
	
	static class Node{
		int sum=0;
		int count=0;
		public Node(int s, int c){
			this.sum=s;
			this.count=c;
		}
	}
}
